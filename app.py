# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LmpB_6lK2PnKp8oqWXbgjsPJIGHlE-tg
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.metrics import confusion_matrix
from sklearn import metrics
from sklearn.metrics import roc_curve, auc
from sklearn.preprocessing import LabelEncoder
#from sklearn.externals import joblib
import joblib
import pandas
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")
import pandas as pd
import numpy as np
import nltk
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import CountVectorizer
import itertools
import matplotlib.style as style
from mpl_toolkits.mplot3d import Axes3D
import os # accessing directory structure
import plotly
import plotly.express as px
# graphs to be inline
# %matplotlib inline
import re
# Tutorial about Python regular expressions: https://pymotw.com/2/re/
from sklearn.preprocessing import OneHotEncoder
import pickle
from tqdm import tqdm
import os
from collections import Counter
from sklearn.preprocessing import StandardScaler

import re
import time
from nltk.corpus import stopwords
from sklearn.decomposition import TruncatedSVD
from sklearn.preprocessing import normalize
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics._classification import accuracy_score, log_loss
from sklearn.linear_model import SGDClassifier
from scipy.sparse import hstack

from sklearn.model_selection import StratifiedKFold 
from collections import Counter, defaultdict

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
import math
from sklearn.metrics import normalized_mutual_info_score
warnings.filterwarnings("ignore")
from sklearn import model_selection
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE
from sklearn.manifold import TSNE

# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html
from numpy import loadtxt
from xgboost import XGBClassifier
from scipy.stats import randint as sp_randint
from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import randint
from sklearn.datasets import make_classification
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import f1_score
from sklearn.metrics import roc_curve, auc
from matplotlib.legend_handler import HandlerLine2D
from scipy.stats import uniform
import random
from flask import Flask, jsonify, request,render_template
import flask 
app = Flask(__name__)

def Nullvalue(loan_process_df):
  Categorical_feature=[feature for feature in loan_process_df.columns if loan_process_df[feature].dtypes == 'O' and feature not in ['TARGET']]
  for i in Categorical_feature:
    loan_process_df[i].fillna(loan_process_df[i].mode()[0], inplace=True)  

  continuous_feature=[feature for feature in loan_process_df.columns if loan_process_df[feature].dtypes != 'O' and feature not in ['TARGET']]
  for j in continuous_feature:
    loan_process_df[j].fillna(loan_process_df[j].median(),inplace = True)
  return loan_process_df

@app.route('/')
def hello_world():
    return 'Wrong URL or Port Number!'

@app.route('/Loan')
def Loan():
    return flask.render_template('Loan.html')

def predict(df):
       
    loan_process_df= Nullvalue(df)

    Categorical_feature=[feature for feature in loan_process_df if loan_process_df[feature].dtypes == 'O'and feature not in ['TARGET']]
    ohehot= joblib.load('ohehot.pkl')
    data_cat=ohehot.transform(loan_process_df[Categorical_feature])
    cat_cols_ohe = list(ohehot.get_feature_names(input_features=Categorical_feature))
    data_cat_final = pd.DataFrame(data_cat, columns = cat_cols_ohe)

    continuous_feature=[feature for feature in loan_process_df if loan_process_df[feature].dtypes != 'O' and feature not in ['TARGET']]
    scaler= joblib.load('scaler.pkl')
    data_Num=scaler.transform(loan_process_df[continuous_feature])
    data_Num_final=pd.DataFrame(data_Num, columns=continuous_feature)

    # Final complete data
    data_final = pd.concat([data_cat_final,data_Num_final], axis = 1)
    clf = joblib.load('model.pkl')
    pred = clf.predict(data_final)

    print(pred)
    if pred[0]==0:
       prediction = "Non-defaulter"
    else:
       prediction = "Defaulter"
    
    return prediction
    
@app.route('/upload', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST':
       df = pd.read_csv(request.files.get('file'))
       print(df.shape)
       result= predict(df)
    return jsonify({'result': result})
    
    

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=6081)